@namespace LastWeek.Shared.RecordModules

<div class="start-col">
    <div class="d-flex">
        @if (!edit)
        {
            <InputSelect @bind-Value="Record.Selected" disabled="@IsDisabled">
                @if (Record?.Choices != null)
                {
                @foreach (var choice in Record.Choices)
                    {
                    <option value="@choice">@choice</option>
                    }
                }
        </InputSelect>
        }
        else
        {
            if (Record?.Choices != null)
            {
                <div class="start-col">
                    @foreach (var choice in Record.Choices.Select((a, i) => new { Choice = a, Index = i }))
                    {
                        <div class="answer-input">
                            <div class="delete-icon">
                                <button type="button" @onclick="@(() => RemoveOption(choice.Index))" class="fas fa-trash fa-fw"></button>
                            </div>
                            <InputText placeholder="@Record.Question" Value="@choices[choice.Index].Value"
                           ValueExpression="@(() => choices[choice.Index].Value)"
                           @onkeyup="@(() => OnValueChanged(choice.Index))"
                           ValueChanged="@((string value) => OnValueChanged(choice.Index))" />
                        </div>
                    }
                </div>
            }
        }
        @if (!IsDisabled)
        {
            <button type="button" @onclick="ToggleEdit" class="fas @(edit ? "fa-circle-check" : "fa-edit") btn-no-border"></button>
        }
    </div>
    @if (!IsDisabled)
    {
        <div>
            <InputText @bind-Value="newChoice" placeholder="Add new choice" />
            <button type="button" @onclick="AddChoice" class="btn-no-border fa-solid fa-circle-plus"></button>
        </div>
    }
</div>

@code {
    [Parameter]
    public ChoiceRecord Record { get; set; } = new();
    [CascadingParameter]
    public ReviewStatus ReviewStatus { get; set; }
    private bool IsDisabled => ReviewStatus == ReviewStatus.Validated || ReviewStatus == ReviewStatus.Archived;
    private bool edit = false;
    private string newChoice = string.Empty;
    private List<FormResponse> choices = new();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (Record.Choices == null) Record.Choices = new();
        choices = Record.Choices.Select(s => new FormResponse { Value = s }).ToList();
    }

    protected void ToggleEdit()
    {
        edit = !edit;
    }

    protected void AddChoice()
    {
        if (Record.Choices == null) Record.Choices = new();
        Record.Choices.Add(newChoice);
        choices.Add(new FormResponse { Value = newChoice });
        Record.Selected = newChoice;
        newChoice = string.Empty;
    }

    private void OnValueChanged(int index)
    {
        Record.Choices[index] = choices[index].Value;
    }

    private void RemoveOption(int index)
    {
        Record.Choices.RemoveAt(index);
        choices.RemoveAt(index);
    }
}